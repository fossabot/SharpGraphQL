@page "/tables"
@page "/tables/{TableName?}"
@inject IJSRuntime JSRuntime
@using SharpGraph.Core
@using SharpGraph.Core.GraphQL

<PageTitle>@(string.IsNullOrEmpty(TableName) ? "Tables" : $"Table: {TableName}") - SharpGraph IDE</PageTitle>

@if (string.IsNullOrEmpty(TableName))
{
    <!-- Tables Overview -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-table mr-2"></i>
                        Database Tables
                    </h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-primary btn-sm" @onclick="RefreshTables">
                            <i class="fas fa-sync-alt mr-1"></i>
                            Refresh
                        </button>
                        <button type="button" class="btn btn-success btn-sm ml-1" @onclick="ShowCreateTableModal">
                            <i class="fas fa-plus mr-1"></i>
                            Create Table
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th><i class="fas fa-table mr-1"></i>Table Name</th>
                                    <th><i class="fas fa-database mr-1"></i>Records</th>
                                    <th><i class="fas fa-search mr-1"></i>Indexes</th>
                                    <th><i class="fas fa-hdd mr-1"></i>Size</th>
                                    <th><i class="fas fa-clock mr-1"></i>Last Modified</th>
                                    <th><i class="fas fa-cogs mr-1"></i>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var table in TableList)
                                {
                                    <tr>
                                        <td>
                                            <a href="/tables/@table.Name" class="text-primary font-weight-bold">
                                                @table.Name
                                            </a>
                                        </td>
                                        <td>
                                            <span class="badge badge-@(table.RecordCount > 1000 ? "warning" : table.RecordCount > 100 ? "info" : "secondary")">
                                                @table.RecordCount.ToString("N0")
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge badge-primary">@table.IndexCount</span>
                                        </td>
                                        <td>@table.Size</td>
                                        <td>
                                            <span title="@table.LastModified.ToString("yyyy-MM-dd HH:mm:ss")">
                                                @GetRelativeTime(table.LastModified)
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/tables/@table.Name" class="btn btn-sm btn-outline-primary" title="View Data">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <button class="btn btn-sm btn-outline-info" @onclick="() => ShowSchema(table.Name)" title="View Schema">
                                                    <i class="fas fa-code"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-success" @onclick="() => ExportTable(table.Name)" title="Export Data">
                                                    <i class="fas fa-download"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(table.Name)" title="Delete Table">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    @if (!TableList.Any())
                    {
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-table fa-3x mb-3"></i>
                            <h5>No Tables Found</h5>
                            <p>Create your first table to get started</p>
                            <button class="btn btn-primary" @onclick="ShowCreateTableModal">
                                <i class="fas fa-plus mr-1"></i>
                                Create Table
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Individual Table View -->
    <div class="row">
        <!-- Table Info -->
        <div class="col-lg-3">
            <div class="card card-primary card-outline">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-info-circle mr-1"></i>
                        Table Info
                    </h3>
                </div>
                <div class="card-body">
                    @if (SelectedTable != null)
                    {
                        <dl class="row">
                            <dt class="col-sm-5">Name:</dt>
                            <dd class="col-sm-7">@SelectedTable.Name</dd>
                            
                            <dt class="col-sm-5">Records:</dt>
                            <dd class="col-sm-7">
                                <span class="badge badge-primary">@SelectedTable.RecordCount.ToString("N0")</span>
                            </dd>
                            
                            <dt class="col-sm-5">Indexes:</dt>
                            <dd class="col-sm-7">
                                <span class="badge badge-info">@SelectedTable.IndexCount</span>
                            </dd>
                            
                            <dt class="col-sm-5">Size:</dt>
                            <dd class="col-sm-7">@SelectedTable.Size</dd>
                            
                            <dt class="col-sm-5">Created:</dt>
                            <dd class="col-sm-7">@SelectedTable.Created.ToString("yyyy-MM-dd")</dd>
                            
                            <dt class="col-sm-5">Modified:</dt>
                            <dd class="col-sm-7">@SelectedTable.LastModified.ToString("yyyy-MM-dd HH:mm")</dd>
                        </dl>
                        
                        <div class="mt-3">
                            <button class="btn btn-outline-primary btn-block btn-sm" @onclick="() => ShowSchema(SelectedTable.Name)">
                                <i class="fas fa-code mr-1"></i>
                                View Schema
                            </button>
                            <button class="btn btn-outline-success btn-block btn-sm mt-1" @onclick="() => ExportTable(SelectedTable.Name)">
                                <i class="fas fa-download mr-1"></i>
                                Export Data
                            </button>
                            <button class="btn btn-outline-warning btn-block btn-sm mt-1" @onclick="ShowImportModal">
                                <i class="fas fa-upload mr-1"></i>
                                Import Data
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-bolt mr-1"></i>
                        Quick Actions
                    </h3>
                </div>
                <div class="card-body">
                    <a href="/query" class="btn btn-primary btn-block btn-sm">
                        <i class="fab fa-graphql mr-1"></i>
                        Query in Playground
                    </a>
                    <button class="btn btn-info btn-block btn-sm mt-1" @onclick="ShowAddRecordModal">
                        <i class="fas fa-plus mr-1"></i>
                        Add Record
                    </button>
                    <button class="btn btn-warning btn-block btn-sm mt-1" @onclick="CreateIndex">
                        <i class="fas fa-search-plus mr-1"></i>
                        Create Index
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Table Data -->
        <div class="col-lg-9">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-table mr-1"></i>
                        Table Data: @TableName
                    </h3>
                    <div class="card-tools">
                        <div class="input-group input-group-sm" style="width: 200px;">
                            <input type="text" @bind="SearchTerm" @onkeypress="HandleSearchKeyPress" 
                                   class="form-control float-right" placeholder="Search records...">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-default" @onclick="SearchRecords">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body table-responsive p-0">
                    @if (IsLoadingRecords)
                    {
                        <div class="text-center p-4">
                            <div class="loading-spinner"></div>
                            <div class="mt-2">Loading records...</div>
                        </div>
                    }
                    else if (Records.Any())
                    {
                        <table class="table table-sm table-hover table-striped">
                            <thead class="thead-light">
                                <tr>
                                    @foreach (var column in Columns)
                                    {
                                        <th>
                                            @column.Name
                                            <small class="text-muted">(@column.Type)</small>
                                        </th>
                                    }
                                    <th width="100">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in Records.Skip(CurrentPage * PageSize).Take(PageSize))
                                {
                                    <tr>
                                        @foreach (var column in Columns)
                                        {
                                            <td>
                                                @if (column.Name == "id")
                                                {
                                                    <span class="badge badge-primary">@GetFieldValue(record, column.Name)</span>
                                                }
                                                else
                                                {
                                                    @GetFieldValue(record, column.Name)
                                                }
                                            </td>
                                        }
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" @onclick="() => EditRecord(record)" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteRecord(record)" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        
                        <!-- Pagination -->
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <div>
                                Showing @((CurrentPage * PageSize) + 1) to @Math.Min((CurrentPage + 1) * PageSize, Records.Count) 
                                of @Records.Count records
                            </div>
                            <nav>
                                <ul class="pagination pagination-sm m-0">
                                    <li class="page-item @(CurrentPage == 0 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)">Previous</button>
                                    </li>
                                    @for (int i = Math.Max(0, CurrentPage - 2); i <= Math.Min(TotalPages - 1, CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == CurrentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@(i + 1)</button>
                                        </li>
                                    }
                                    <li class="page-item @(CurrentPage >= TotalPages - 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)">Next</button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-database fa-3x mb-3"></i>
                            <h5>No Records Found</h5>
                            <p>This table is empty or no records match your search</p>
                            <button class="btn btn-primary" @onclick="ShowAddRecordModal">
                                <i class="fas fa-plus mr-1"></i>
                                Add First Record
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? TableName { get; set; }

    private List<TableInfo> TableList { get; set; } = new();
    private TableInfo? SelectedTable { get; set; }
    private List<ColumnInfo> Columns { get; set; } = new();
    private List<Dictionary<string, object>> Records { get; set; } = new();
    private bool IsLoadingRecords { get; set; } = false;
    
    private string SearchTerm { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 0;
    private int PageSize { get; set; } = 20;
    private int TotalPages => (int)Math.Ceiling((double)Records.Count / PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadTables();
        
        if (!string.IsNullOrEmpty(TableName))
        {
            await LoadTableData(TableName);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(TableName))
        {
            await LoadTableData(TableName);
        }
    }

    private async Task LoadTables()
    {
        // In real implementation, this would load from SharpGraph
        TableList = new List<TableInfo>
        {
            new() { Name = "User", RecordCount = 150, IndexCount = 3, Size = "12.5 KB", LastModified = DateTime.Now.AddHours(-2), Created = DateTime.Now.AddDays(-30) },
            new() { Name = "Post", RecordCount = 89, IndexCount = 2, Size = "8.3 KB", LastModified = DateTime.Now.AddHours(-1), Created = DateTime.Now.AddDays(-25) },
            new() { Name = "Comment", RecordCount = 324, IndexCount = 2, Size = "15.7 KB", LastModified = DateTime.Now.AddMinutes(-30), Created = DateTime.Now.AddDays(-20) },
            new() { Name = "Category", RecordCount = 12, IndexCount = 1, Size = "1.2 KB", LastModified = DateTime.Now.AddDays(-1), Created = DateTime.Now.AddDays(-35) }
        };
    }

    private async Task LoadTableData(string tableName)
    {
        SelectedTable = TableList.FirstOrDefault(t => t.Name == tableName);
        if (SelectedTable == null) return;

        IsLoadingRecords = true;
        StateHasChanged();

        // Mock data loading
        await Task.Delay(500);

        // Load columns (in real implementation, this would come from schema)
        Columns = tableName.ToLower() switch
        {
            "user" => new List<ColumnInfo>
            {
                new() { Name = "id", Type = "ID!" },
                new() { Name = "name", Type = "String!" },
                new() { Name = "email", Type = "String!" },
                new() { Name = "createdAt", Type = "String" }
            },
            "post" => new List<ColumnInfo>
            {
                new() { Name = "id", Type = "ID!" },
                new() { Name = "title", Type = "String!" },
                new() { Name = "content", Type = "String!" },
                new() { Name = "authorId", Type = "ID!" }
            },
            _ => new List<ColumnInfo>
            {
                new() { Name = "id", Type = "ID!" },
                new() { Name = "data", Type = "String" }
            }
        };

        // Load records (mock data)
        Records = GenerateMockRecords(tableName, SelectedTable.RecordCount);
        
        IsLoadingRecords = false;
        StateHasChanged();
    }

    private List<Dictionary<string, object>> GenerateMockRecords(string tableName, int count)
    {
        var records = new List<Dictionary<string, object>>();
        
        for (int i = 1; i <= Math.Min(count, 100); i++) // Limit to 100 for demo
        {
            var record = new Dictionary<string, object>();
            
            switch (tableName.ToLower())
            {
                case "user":
                    record["id"] = $"user-{i}";
                    record["name"] = $"User {i}";
                    record["email"] = $"user{i}@example.com";
                    record["createdAt"] = DateTime.Now.AddDays(-i).ToString("yyyy-MM-dd");
                    break;
                case "post":
                    record["id"] = $"post-{i}";
                    record["title"] = $"Post Title {i}";
                    record["content"] = $"Content for post {i}...";
                    record["authorId"] = $"user-{(i % 10) + 1}";
                    break;
                default:
                    record["id"] = $"item-{i}";
                    record["data"] = $"Data {i}";
                    break;
            }
            
            records.Add(record);
        }
        
        return records;
    }

    private string GetFieldValue(Dictionary<string, object> record, string fieldName)
    {
        if (record.TryGetValue(fieldName, out var value))
        {
            return value?.ToString() ?? "";
        }
        return "";
    }

    private async Task RefreshTables()
    {
        await LoadTables();
        await JSRuntime.InvokeVoidAsync("showAlert", "Tables refreshed", "success");
    }

    private async Task ShowSchema(string tableName)
    {
        await JSRuntime.InvokeVoidAsync("showAlert", $"Schema view for {tableName} - Feature coming soon!", "info");
    }

    private async Task ExportTable(string tableName)
    {
        await JSRuntime.InvokeVoidAsync("showAlert", $"Exporting {tableName} - Feature coming soon!", "info");
    }

    private async Task ShowCreateTableModal()
    {
        await JSRuntime.InvokeVoidAsync("showAlert", "Create table - Feature coming soon!", "info");
    }

    private async Task ShowDeleteConfirmation(string tableName)
    {
        await JSRuntime.InvokeVoidAsync("showAlert", $"Delete {tableName} - Feature coming soon!", "warning");
    }

    private async Task ShowImportModal()
    {
        await JSRuntime.InvokeVoidAsync("showAlert", "Import data - Feature coming soon!", "info");
    }

    private async Task ShowAddRecordModal()
    {
        await JSRuntime.InvokeVoidAsync("showAlert", "Add record - Feature coming soon!", "info");
    }

    private async Task CreateIndex()
    {
        await JSRuntime.InvokeVoidAsync("showAlert", "Create index - Feature coming soon!", "info");
    }

    private async Task EditRecord(Dictionary<string, object> record)
    {
        await JSRuntime.InvokeVoidAsync("showAlert", $"Edit record {GetFieldValue(record, "id")} - Feature coming soon!", "info");
    }

    private async Task DeleteRecord(Dictionary<string, object> record)
    {
        await JSRuntime.InvokeVoidAsync("showAlert", $"Delete record {GetFieldValue(record, "id")} - Feature coming soon!", "warning");
    }

    private async Task SearchRecords()
    {
        // In real implementation, this would filter records
        await JSRuntime.InvokeVoidAsync("showAlert", $"Search for '{SearchTerm}' - Feature coming soon!", "info");
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchRecords();
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 0 && page < TotalPages)
        {
            CurrentPage = page;
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return dateTime.ToString("MMM dd");
    }

    // Data models
    public class TableInfo
    {
        public string Name { get; set; } = string.Empty;
        public int RecordCount { get; set; }
        public int IndexCount { get; set; }
        public string Size { get; set; } = string.Empty;
        public DateTime LastModified { get; set; }
        public DateTime Created { get; set; }
    }

    public class ColumnInfo
    {
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
    }
}